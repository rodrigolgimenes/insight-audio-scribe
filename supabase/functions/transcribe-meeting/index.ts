
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.48.1";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const supabase = createClient(
  Deno.env.get('SUPABASE_URL') || '',
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') || ''
);

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { audioData, recordingData } = await req.json();
    
    if (!audioData) {
      throw new Error('Audio data is missing from the request');
    }

    console.log('Processing audio data:', {
      recordingData,
      audioDataLength: audioData.length
    });

    // Convert base64 to Uint8Array
    const binaryData = Uint8Array.from(atob(audioData), c => c.charCodeAt(0));
    const blob = new Blob([binaryData], { type: recordingData.mimeType || 'audio/webm' });

    // Generate a unique filename
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const fileExtension = 'webm';
    const fileName = `meeting-recordings/${timestamp}-recording.${fileExtension}`;
    
    // Upload file to storage
    const { data: uploadData, error: uploadError } = await supabase
      .storage
      .from('audio-recordings')
      .upload(fileName, blob, {
        contentType: recordingData.mimeType || 'audio/webm',
        upsert: false
      });
    
    if (uploadError) {
      throw new Error(`Error uploading audio: ${uploadError.message}`);
    }
    
    console.log('Audio uploaded successfully:', uploadData);
    
    const { data: { publicUrl } } = supabase
      .storage
      .from('audio-recordings')
      .getPublicUrl(fileName);
    
    // Create a record in the transcriptions table
    const { data: transcriptionData, error: transcriptionError } = await supabase
      .from('transcriptions')
      .insert({
        audio_url: publicUrl,
        duration_ms: recordingData.duration || 0,
        status: 'pending',
        is_system_audio: recordingData.isSystemAudio || false,
      })
      .select()
      .single();
    
    if (transcriptionError) {
      throw new Error(`Error creating transcription record: ${transcriptionError.message}`);
    }
    
    console.log('Transcription record created:', transcriptionData);
    
    // Simulate transcription processing time
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const simulatedTranscription = "This is a simulated transcription of the meeting. In a production environment, the transcription would be generated by the faster-whisper model in Python. The text would be much longer and more accurate, based on the audio sent.";
    
    // Update the transcription record with the result
    const { data: updatedTranscription, error: updateError } = await supabase
      .from('transcriptions')
      .update({
        content: simulatedTranscription,
        status: 'completed',
        processed_at: new Date().toISOString()
      })
      .eq('id', transcriptionData.id)
      .select()
      .single();
    
    if (updateError) {
      throw new Error(`Error updating transcription: ${updateError.message}`);
    }
    
    console.log('Transcription completed:', updatedTranscription);

    return new Response(
      JSON.stringify({
        success: true,
        transcription: simulatedTranscription,
        recordId: transcriptionData.id
      }),
      {
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      }
    );
  } catch (error) {
    console.error('Error processing request:', error);
    
    return new Response(
      JSON.stringify({
        success: false,
        error: error.message
      }),
      {
        status: 400,
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      }
    );
  }
});
